#+TITLE:    OpenWrt Docker x86_64 Image
#+AUTHOR:   Kambiz Darabi
#+EMAIL:    darabi@m-creations.net
#+DATE: \today
#+TAGS: { export noexport }
#+STARTUP: hidestars
#+STARTUP: overview
#+OPTIONS: ^:{}


* Introduction

This document gathers all information about the build process for a
reliable build and distribution of a x86_64 base image and
corresponding packages.

The docker base image can be found at

https://registry.hub.docker.com/u/mcreations/openwrt-x64/

* Development Process

To be able to provide consistent binaries, tags are created with
format `vYYYYMMDD` (year-month-day).

In contrast to the trunk version of openwrt, the package feeds are
already incorporated in this repo and don't need to be updated from
their respective git repositories. Therefore it is **forbidden** to
use `./scripts/feeds update` without the `-i` option: only indexing of
the feeds is allowed.

The current configuration for the build is kept in
m-creations/config-x86_64.

* Build Process

The build process uses the mentioned m-creations/config-x86_64 as
.config, then starts a build which creates the base images and all
packages.

** Build all packages

```
cp m-creations/config-x86_64 .config
./scripts/feeds update -i
(date > build.log && make  V=s && date) 2>&1 | tee -a build.log
```

A clean build on current hardware (with `make -j 1`) takes roughly 1.5
hours to finish and produces around 550 ipk files which total ~ 70 MB.

** Update the feed subtrees

The feed subtrees were added with:

```
git remote add feed-packages https://github.com/openwrt/packages.git
git subtree add --squash --prefix=feeds/packages feed-packages master

git remote add feed-luci https://github.com/openwrt/luci.git
git subtree add --squash --prefix=feeds/luci feed-luci master

git remote add feed-routing https://github.com/openwrt-routing/packages.git
git subtree add --squash --prefix=feeds/routing feed-routing master

git remote add feed-telephony http://git.openwrt.org/feed/telephony.git
git subtree add --squash --prefix=feeds/telephony feed-telephony master

git remote add feed-management https://github.com/openwrt-management/packages.git
git subtree add --squash --prefix=feeds/management feed-management master
```

With these commands the feeds are updated to the master of those
repos, and all new packages are 'installed' which means that they now
become visible (but not selected due to `-d n`) in `make menuconfig`:

```
for f in packages luci routing telephony management ; do
  echo git subtree pull —prefix=feeds/$f —squash feed-$f master
done

./scripts/feeds update -i
./scripts/feeds install -a -d n
```

If it becomes necessary to patch the feed repos, you can fork the
package feed, add a  my-feed-<feedname> remote repository
URL and push a branch to that repo:

```
git remote add my-feed-packages https://github.com/yourname/packages.git
git subtree push --prefix=feeds/packages my-feed-packages 20141126-update-freeradius
```
** Create a new package

#+BEGIN_SRC
mkdir feeds/packages/lang/twisted/

# ... create a Makefile and optionally patches

./scripts/feeds update -i

./scripts/feeds install twisted

make menuconfig # and add the newly appearing package as module

# I'm not sure if this is really necessary, as ../install also compiles
#
# make package/twisted/install V=s | tee build.log

make package/twisted/install V=s | tee build.log

# update Packages.gz
make package/index

# upload the new file and Packes.gz to github (cf. Release a new version)

release_tag=v20150602
ipk=bin/x86-glibc/packages/twisted_10.2.0-1_x86_64.ipk
github-release upload --user m-creations --repo openwrt --tag $release_tag --name $(basename $ipk) --file $ipk
# delete Packages.gz, Packages, and Packages.sig in github manually (not possible with github-release)
github-release upload --user m-creations --repo openwrt --tag $release_tag --name Packages.gz --file bin/x86-glibc/packages/Packages.gz
github-release upload --user m-creations --repo openwrt --tag $release_tag --name Packages --file bin/x86-glibc/packages/Packages
github-release upload --user m-creations --repo openwrt --tag $release_tag --name Packages.sig --file bin/x86-glibc/packages/Packages.sig

#+END_SRC

* Release a new version

Get, build and add [github-release](https://github.com/aktau/github-release) to your path.

export GITHUB_TOKEN=.....

release_tag=v20150602

github-release info -u m-creations -r openwrt

github-release release --tag $release_tag \
  --name "Bashful Bear 2014-11-28" \
  --description "First pre-release of Barrier Breaker x86_64 optimised for use in Docker containers" \
  --user m-creations --repo openwrt --pre-release

github-release upload --user m-creations --repo openwrt --tag $release_tag --name openwrt-x86-glibc-rootfs.tar.gz --file bin/x86-glibc/openwrt-${release_tag}-x86-64-rootfs.tar.gz 
for ipk in bin/x86-glibc/packages/*ipk ; do
  github-release upload --user m-creations --repo openwrt --tag $release_tag --name $(basename $ipk) --file $ipk
  sleep 3
done

Check which files have NOT been uploaded:

tmpfile=`tempfile`
github-release info -u m-creations -r openwrt | grep artifact: > $tmpfile

for f in bin/x86-glibc/packages/*ipk; do
  grep -q $(basename $f) $tmpfile
  if [ $? != 0 ] ; then
    github-release -v upload --user m-creations --repo openwrt --tag $release_tag --name $(basename $f) --file $f
    sleep 3
  fi
done

Upload the package list with signature:

github-release upload --user m-creations --repo openwrt --tag $release_tag --name Packages.gz --file bin/x86-glibc/packages/Packages.gz
github-release upload --user m-creations --repo openwrt --tag $release_tag --name Packages --file bin/x86-glibc/packages/Packages
github-release upload --user m-creations --repo openwrt --tag $release_tag --name Packages.sig --file bin/x86-glibc/packages/Packages.sig


Note that failed files might need to be deleted manually through the
github web interface, befor above code is run.

* Rsync binaries and packages to galen web server

sudo rsync -av --delete /export/repo/openwrt/bin/ar71xx/ /var/www/openwrt/snapshot/14-dev/ar71xx/

Note that openwrt.m-creations.net points to haproxy which runs on ports 80 and 443 on galen.
* Working with Quilt patches

See https://wiki.openwrt.org/doc/devel/patches

OpenWrt Buildroot integrates Quilt for easy patch management.  This
section outlines some common patching tasks like adding a new patch or
editing existing ones.

** Prepare quilt configuration

In order to let /quilt/ create patches in OpenWrts preferred format,
a configuration file =.quiltrc= containing common /diff/ and
/patch/ options must be created in the local home directory.

#+BEGIN_SRC 

cat > ~/.quiltrc <<EOF
QUILT_DIFF_ARGS="--no-timestamps --no-index -p ab --color=auto"
QUILT_REFRESH_ARGS="--no-timestamps --no-index -p ab"
QUILT_PATCH_OPTS="--unified"
QUILT_DIFF_OPTS="-p"
EDITOR="nano"
EOF

#+END_SRC

- =EDITOR= specifies the preferred editor for interactive patch editing
- The other variables control the patch format property like a/, b/ directory names and no timestamps
- FreeBSD does not support the =%%--color\=auto%%= option and =-pab= must be written as =-p ab=

===== Adding a new patch =====

To add a completely new patch to an existing package //example// start with preparing the source directory:

#+BEGIN_SRC 
make package/example/{clean,prepare} V=s QUILT=1
#+END_SRC

For host-side packages, you may want to detail the make target:

#+BEGIN_SRC 
make package/example/host/{clean,prepare} V=s QUILT=1
#+END_SRC


This unpacks the source tarball and prepares existing patches as
/quilt patch series/ (if any).  The verbose output will show where
the source got extracted.


Change to the prepared source directory. 

#+BEGIN_SRC 
cd build_dir/target-*/example-*
#+END_SRC

Note : It can happen that you need to go one level lower as the source
is extracted in =build_dir/target-*/BUILD_VARIANT/example-*=. This
happens when multiple build variants of a package are defined in the
Makefile.

Apply all existing patches using /quilt push/.

#+BEGIN_SRC 
quilt push -a
#+END_SRC

Create a new, empty patch file with the //quilt new// command:

#+BEGIN_SRC 
quilt new 010-main_code_fix.patch
#+END_SRC

- The name should start with a number, followed by a hyphen and a very short description of what is changed
- The chosen number should be higher than any existing patch - use =quilt series= to see the list of patches
- The patch file name should be short but descriptive


After creating the empty patch, files to edit must be associated with
it.  The =quilt add= command can be used for that - once the file got
added it can be edited as usual.

A shortcut for both adding a file and open it in an editor is the
=quilt edit= command:

#+BEGIN_SRC 
quilt edit src/main.c
#+END_SRC

- =src/main.c= gets added to =010-main_code_fix.patch=
- The file is opened in the editor specified with =EDITOR= in =.quiltrc=

Repeat that for any file that needs to be edited.

After the changes are finished, they can be reviewed with the //quilt diff// command.

#+BEGIN_SRC 
quilt diff
#+END_SRC


If the diff looks okay, proceed with =quilt refresh= to update the
=010-main_code_fix.patch= file with the changes made.

#+BEGIN_SRC 
quilt refresh
#+END_SRC

Change back to the toplevel directory of the buildroot.

To move the new patch file over to the buildroot, run =update= on the package:

#+BEGIN_SRC 
make package/example/update V=s
#+END_SRC

Finally rebuild the package to test the changes:

#+BEGIN_SRC 
make package/example/{clean,compile} package/index V=s
#+END_SRC


If problems occur, the patch needs to be edited again to solve the issues.
Refer to the section below to learn how to edit existing patches.

** Edit an existing patch

Start with preparing the source directory:

#+BEGIN_SRC 
make package/example/{clean,prepare} V=s QUILT=1
#+END_SRC

Change to the prepared source directory.

#+BEGIN_SRC 
cd build_dir/target-*/example-*
#+END_SRC

List the patches available:

#+BEGIN_SRC 
quilt series
#+END_SRC

Advance to the patch that needs to be edited:

#+BEGIN_SRC 
quilt push 010-main_code_fix.patch
#+END_SRC

- When passing a valid patch filename to =push=, =quilt= will only apply the series until it reaches the specified patch
- If unsure, use =quilt series= to see existing patches and =quilt top= to see the current position
- If the current position is beyound the desired patch, use =quilt pop= to remove patches in the reverse order
- You can use the "force" push option (e.g. =quilt push -f 010-main_code_fix.patch=) to interactively apply a broken (i.e. has rejects) patch


Edit the patched files using the =quilt edit= command, repeat for
every file that needs changes.

#+BEGIN_SRC 
quilt edit src/main.c
#+END_SRC


Check which files are to be included in the patch:

#+BEGIN_SRC 
quilt files
#+END_SRC

Review the changes with =quilt diff=.

#+BEGIN_SRC 
quilt diff
#+END_SRC


If the diff looks okay, proceed with =quilt refresh= to update the current patch with the changes made.

#+BEGIN_SRC 
quilt refresh
#+END_SRC

Change back to the toplevel diretory of the buildroot.

To move the updated patch file over to the buildroot, run =update= on
the package:

#+BEGIN_SRC 
make package/example/update V=s
#+END_SRC


Finally rebuild the package to test the changes:

#+BEGIN_SRC 
make package/example/{clean,compile} package/index V=s
#+END_SRC

