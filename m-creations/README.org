#+TITLE:    OpenWrt Docker x86_64 Image
#+AUTHOR:   Kambiz Darabi
#+EMAIL:    darabi@m-creations.net
#+DATE: \today
#+TAGS: { export noexport }
#+STARTUP: hidestars
#+STARTUP: overview
#+OPTIONS: ^:{}


* Introduction

This document gathers all information about the build process for a
reliable build and distribution of a x86_64 base image and
corresponding packages.

The docker base image can be found at

https://registry.hub.docker.com/u/mcreations/openwrt-x64/

* Development Process

To be able to provide consistent binaries, tags are created with
format `vYYYYMMDD` (year-month-day).

In contrast to the trunk version of openwrt, the package feeds are
already incorporated in this repo and don't need to be updated from
their respective git repositories. Therefore it is **forbidden** to
use `./scripts/feeds update` without the `-i` option: only indexing of
the feeds is allowed.

The current configuration for the build is kept in
m-creations/config-x86_64.

* Build Process

The build process uses the mentioned m-creations/config-x86_64 as
.config, then starts a build which creates the base images and all
packages.

** Build all packages

```
cp m-creations/config-x86_64 .config
./scripts/feeds update -i
(date > build.log && make  V=s && date) 2>&1 | tee -a build.log
```

A clean build on current hardware (with `make -j 1`) takes roughly 1.5
hours to finish and produces around 550 ipk files which total ~ 70 MB.

** Update the feed subtrees

The feed subtrees were added with:

```
git remote add feed-packages https://github.com/openwrt/packages.git
git subtree add --squash --prefix=feeds/packages feed-packages master

git remote add feed-luci https://github.com/openwrt/luci.git
git subtree add --squash --prefix=feeds/luci feed-luci master

git remote add feed-routing https://github.com/openwrt-routing/packages.git
git subtree add --squash --prefix=feeds/routing feed-routing master

git remote add feed-telephony http://git.openwrt.org/feed/telephony.git
git subtree add --squash --prefix=feeds/telephony feed-telephony master

git remote add feed-management https://github.com/openwrt-management/packages.git
git subtree add --squash --prefix=feeds/management feed-management master
```

With these commands the feeds are updated to the master of those repos:

```
for f in packages luci routing telephony management ; do
  echo git subtree pull —prefix=feeds/$f —squash feed-$f master
done

./scripts/feeds update -i
./scripts/feeds install -a
```

If it becomes necessary to patch the feed repos, you can fork the
package feed, add a  my-feed-<feedname> remote repository
URL and push a branch to that repo:

```
git remote add my-feed-packages https://github.com/yourname/packages.git
git subtree push --prefix=feeds/packages my-feed-packages 20141126-update-freeradius
```
** Create a new package

#+BEGIN_SRC
mkdir feeds/packages/lang/twisted/

# ... create a Makefile and optionally patches

make menuconfig # and add the newly appearing package as module

# I'm not sure if this is really necessary, as ../install also compiles
#
# make package/twisted/install V=s | tee build.log

make package/twisted/install V=s | tee build.log

# update Packages.gz
make package/index

# upload the new file and Packes.gz to github (cf. Release a new version)

ipk=bin/x86_64/packages/twisted_10.2.0-1_x86_64.ipk
github-release upload --user m-creations --repo openwrt --tag v20141128 --name $(basename $ipk) --file $ipk
# delete Packages.gz in github manually (not possible with github-release)
github-release upload --user m-creations --repo openwrt --tag v20141128 --name Packages.gz --file bin/x86_64/packages/Packages.gz

#+END_SRC

* Release a new version

Get, build and add [github-release](https://github.com/aktau/github-release) to your path.

export GITHUB_TOKEN=.....

github-release info -u m-creations -r openwrt

github-release release --tag v20141128 \
  --name "Bashful Bear 2014-11-28" \
  --description "First pre-release of Barrier Breaker x86_64 optimised for use in Docker containers" \
  --user m-creations --repo openwrt --pre-release

github-release upload --user m-creations --repo openwrt --tag v20141128 --name openwrt-x86_64-rootfs.tar.gz --file bin/x86_64/openwrt-x86_64-rootfs.tar.gz

for ipk in bin/x86_64/packages/*ipk ; do
  github-release upload --user m-creations --repo openwrt --tag v20141128 --name $(basename $ipk) --file $ipk
  sleep 3
done

Check which files have NOT been uploaded:

tmpfile=`tempfile`
github-release info -u m-creations -r openwrt | grep artifact: > $tmpfile

for f in bin/x86_64/packages/*ipk; do
  grep -q $(basename $f) $tmpfile
  if [ $? != 0 ] ; then
    github-release -v upload --user m-creations --repo openwrt --tag v20141128 --name $(basename $f) --file $f
    sleep 3
  fi
done

Note that failed files might need to be deleted manually through the
github web interface, befor above code is run.

