From 2153b72fdd4295344747f5dca1cfc0d9f10728cf Mon Sep 17 00:00:00 2001
From: Kambiz Darabi <darabi@m-creations.net>
Date: Sat, 23 Jan 2016 17:11:59 +0100
Subject: [PATCH 07/10] Do not call exit in haproxy.c

---
 src/haproxy.c | 68 ++++++++++++++++++++++++++++++-----------------------------
 src/main.c    |  4 +---
 2 files changed, 36 insertions(+), 36 deletions(-)

diff --git a/src/haproxy.c b/src/haproxy.c
index 408ebac..2a1934a 100644
--- a/src/haproxy.c
+++ b/src/haproxy.c
@@ -357,7 +357,6 @@ void usage(char *name)
 		"        -sf/-st [pid ]* finishes/terminates old pids.\n"
 		"\n",
 		name, DEFAULT_MAXCONN, cfg_maxpconn);
-	exit(1);
 }
 
 
@@ -452,10 +451,10 @@ void dump(struct sig_handler *sh)
 }
 
 /*
- * This function initializes all the necessary variables. It only returns
- * if everything is OK. If something fails, it exits.
+ * This function initializes all the necessary variables. It returns
+ * 0 if everything is OK. If something fails, it returns a non-zero error code.
  */
-void init(int argc, char **argv)
+int init(int argc, char **argv)
 {
 	int arg_mode = 0;	/* MODE_DEBUG, ... */
 	char *tmp;
@@ -500,7 +499,7 @@ void init(int argc, char **argv)
 
 	signal_init();
 	if (init_acl() != 0)
-		exit(1);
+		return 1;
 	init_task();
 	init_stream();
 	init_session();
@@ -549,7 +548,7 @@ void init(int argc, char **argv)
 				display_version();
 				if (flag[1] == 'v')  /* -vv */
 					display_build_opts();
-				exit(0);
+				return 0;
 			}
 #if defined(ENABLE_EPOLL)
 			else if (*flag == 'd' && flag[1] == 'e')
@@ -618,7 +617,7 @@ void init(int argc, char **argv)
 					wl = (struct wordlist *)calloc(1, sizeof(*wl));
 					if (!wl) {
 						Alert("Cannot load configuration file %s : out of memory.\n", *argv);
-						exit(1);
+						return 1;
 					}
 					wl->s = *argv;
 					LIST_ADDQ(&cfg_cfgfiles, &wl->list);
@@ -641,7 +640,7 @@ void init(int argc, char **argv)
 					wl = (struct wordlist *)calloc(1, sizeof(*wl));
 					if (!wl) {
 						Alert("Cannot load configuration file %s : out of memory.\n", *argv);
-						exit(1);
+						return 1;
 					}
 					wl->s = *argv;
 					LIST_ADDQ(&cfg_cfgfiles, &wl->list);
@@ -665,7 +664,7 @@ void init(int argc, char **argv)
 
 	if (change_dir && chdir(change_dir) < 0) {
 		Alert("Could not change to directory %s : %s\n", change_dir, strerror(errno));
-		exit(1);
+		return 1;
 	}
 
 	global.maxsock = 10; /* reserve 10 fds ; will be incremented by socket eaters */
@@ -679,13 +678,13 @@ void init(int argc, char **argv)
 		if (ret == -1) {
 			Alert("Could not open configuration file %s : %s\n",
 			      wl->s, strerror(errno));
-			exit(1);
+			return 1;
 		}
 		if (ret & (ERR_ABORT|ERR_FATAL))
 			Alert("Error(s) found in configuration file : %s\n", wl->s);
 		err_code |= ret;
 		if (err_code & ERR_ABORT)
-			exit(1);
+			return 1;
 	}
 
 	pattern_finalize_config();
@@ -696,7 +695,7 @@ void init(int argc, char **argv)
 	err_code |= check_config_validity();
 	if (err_code & (ERR_ABORT|ERR_FATAL)) {
 		Alert("Fatal errors found in configuration.\n");
-		exit(1);
+		return 1;
 	}
 
 	/* recompute the amount of per-process memory depending on nbproc and
@@ -719,7 +718,7 @@ void init(int argc, char **argv)
         err_code |= netns_init();
         if (err_code & (ERR_ABORT|ERR_FATAL)) {
                 Alert("Failed to initialize namespace support.\n");
-                exit(1);
+                return 1;
         }
 #endif
 
@@ -738,10 +737,10 @@ void init(int argc, char **argv)
 		if (pr || px) {
 			/* At least one peer or one listener has been found */
 			qfprintf(stdout, "Configuration file is valid\n");
-			exit(0);
+			return 0;
 		}
 		qfprintf(stdout, "Configuration file has no error but will not start (no listener) => exit(2).\n");
-		exit(2);
+		return 2;
 	}
 
 	/* Apply server states */
@@ -750,7 +749,7 @@ void init(int argc, char **argv)
 	global_listener_queue_task = task_new();
 	if (!global_listener_queue_task) {
 		Alert("Out of memory when initializing global task\n");
-		exit(1);
+		return 1;
 	}
 	/* very simple initialization, users will queue the task if needed */
 	global_listener_queue_task->context = NULL; /* not even a context! */
@@ -767,7 +766,7 @@ void init(int argc, char **argv)
 #endif
 
 	if (start_checks() < 0)
-		exit(1);
+		return 1;
 
 	if (cfg_maxconn > 0)
 		global.maxconn = cfg_maxconn;
@@ -865,7 +864,7 @@ void init(int argc, char **argv)
 			      global.rlimit_memmax,
 			      (int)(mem / (STREAM_MAX_COST + 2 * global.tune.bufsize)),
 			      global.maxconn);
-			exit(1);
+			return 1;
 		}
 
 		if (global.maxsslconn > sides * global.maxconn)
@@ -905,7 +904,7 @@ void init(int argc, char **argv)
 			      global.rlimit_memmax,
 			      (int)(mem / (global.ssl_session_max_cost + global.ssl_handshake_max_cost)),
 			      global.maxsslconn);
-			exit(1);
+			return 1;
 		}
 
 		if (global.mode & (MODE_VERBOSE|MODE_DEBUG)) {
@@ -1037,7 +1036,7 @@ void init(int argc, char **argv)
 		      "  %d file descriptors. You should thus reduce global.maxconn by %d. Also,\n"
 		      "  check build settings using 'haproxy -vv'.\n\n",
 		      FD_SETSIZE, global.maxconn, global.maxsock, (global.maxsock + 1 - FD_SETSIZE) / 2);
-		exit(1);
+		return 1;
 	}
 	if (global.mode & (MODE_VERBOSE|MODE_DEBUG)) {
 		printf("Using %s() as the polling mechanism.\n", cur_poller.name);
@@ -1047,11 +1046,11 @@ void init(int argc, char **argv)
 		global.node = strdup(hostname);
 
 	if (!hlua_post_init())
-		exit(1);
+		return 1;
 
 	/* initialize structures for name resolution */
 	if (!dns_init_resolvers())
-		exit(1);
+		return 1;
 }
 
 static void deinit_acl_cond(struct acl_cond *cond)
@@ -1541,7 +1540,10 @@ int haproxy_main(int argc, char **argv)
 	char errmsg[100];
 	int pidfd = -1;
 
-	init(argc, argv);
+	err = init(argc, argv);
+	if(err) {
+		return err;
+	}
 	signal_register_fct(SIGQUIT, dump, SIGQUIT);
 	signal_register_fct(SIGUSR1, sig_soft_stop, SIGUSR1);
 	signal_register_fct(SIGHUP, sig_dump_state, SIGHUP);
@@ -1616,14 +1618,14 @@ int haproxy_main(int argc, char **argv)
 			protocol_unbind_all(); /* cleanup everything we can */
 			tell_old_pids(SIGTTIN);
 		}
-		exit(1);
+		return 1;
 	}
 
 	if (listeners == 0) {
 		Alert("[%s.main()] No enabled listener found (check for 'bind' directives) ! Exiting.\n", argv[0]);
 		/* Note: we don't have to send anything to the old pids because we
 		 * never stopped them. */
-		exit(1);
+		return 1;
 	}
 
 	err = protocol_bind_all(errmsg, sizeof(errmsg));
@@ -1635,7 +1637,7 @@ int haproxy_main(int argc, char **argv)
 		protocol_unbind_all(); /* cleanup everything we can */
 		if (nb_oldpids)
 			tell_old_pids(SIGTTIN);
-		exit(1);
+		return 1;
 	} else if (err & ERR_WARN) {
 		Alert("[%s.main()] %s.\n", argv[0], errmsg);
 	}
@@ -1661,7 +1663,7 @@ int haproxy_main(int argc, char **argv)
 			if (nb_oldpids)
 				tell_old_pids(SIGTTIN);
 			protocol_unbind_all();
-			exit(1);
+			return 1;
 		}
 	}
 
@@ -1669,7 +1671,7 @@ int haproxy_main(int argc, char **argv)
 		Alert("[%s.main()] Some configuration options require full privileges, so global.uid cannot be changed.\n"
 		      "", argv[0]);
 		protocol_unbind_all();
-		exit(1);
+		return 1;
 	}
 
 	/* If the user is not root, we'll still let him try the configuration
@@ -1687,7 +1689,7 @@ int haproxy_main(int argc, char **argv)
 			if (nb_oldpids)
 				tell_old_pids(SIGTTIN);
 			protocol_unbind_all();
-			exit(1);
+			return 1;
 		}
 	}
 
@@ -1707,14 +1709,14 @@ int haproxy_main(int argc, char **argv)
 		if (setgid(global.gid) == -1) {
 			Alert("[%s.main()] Cannot set gid %d.\n", argv[0], global.gid);
 			protocol_unbind_all();
-			exit(1);
+			return 1;
 		}
 	}
 
 	if (global.uid && setuid(global.uid) == -1) {
 		Alert("[%s.main()] Cannot set uid %d.\n", argv[0], global.uid);
 		protocol_unbind_all();
-		exit(1);
+		return 1;
 	}
 
 	/* check ulimits */
@@ -1738,7 +1740,7 @@ int haproxy_main(int argc, char **argv)
 			if (ret < 0) {
 				Alert("[%s.main()] Cannot fork.\n", argv[0]);
 				protocol_unbind_all();
-				exit(1); /* there has been an error */
+				return 1; /* there has been an error */
 			}
 			else if (ret == 0) /* child breaks here */
 				break;
@@ -1778,7 +1780,7 @@ int haproxy_main(int argc, char **argv)
 				for (proc = 0; proc < global.nbproc; proc++)
 					while (waitpid(children[proc], NULL, 0) == -1 && errno == EINTR);
 			}
-			exit(0); /* parent must leave */
+			return 0; /* parent must leave */
 		}
 
 		/* we might have to unbind some proxies from some processes */
diff --git a/src/main.c b/src/main.c
index 3d82f68..6c7f5f1 100644
--- a/src/main.c
+++ b/src/main.c
@@ -29,9 +29,7 @@
 
 int main(int argc, char **argv)
 {
-	haproxy_main(argc, argv);
-
-	exit(0);
+	exit(haproxy_main(argc, argv));
 }
 
 
-- 
1.9.1

