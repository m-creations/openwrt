From c8a56a6bfdc565a7656a1c0e727d60acc1cf5057 Mon Sep 17 00:00:00 2001
From: Kambiz Darabi <darabi@m-creations.net>
Date: Sat, 16 Jan 2016 12:37:22 +0100
Subject: [PATCH 02/10] Extract the declarations part of haproxy.c into
 haproxy.h

---
 include/haproxy.h | 252 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 252 insertions(+)
 create mode 100644 include/haproxy.h

diff --git a/include/haproxy.h b/include/haproxy.h
new file mode 100644
index 0000000..048159d
--- /dev/null
+++ b/include/haproxy.h
@@ -0,0 +1,252 @@
+/*
+ * HA-Proxy : High Availability-enabled HTTP/TCP proxy
+ * Copyright 2000-2015  Willy Tarreau <w@1wt.eu>.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ *
+ * Please refer to RFC2068 or RFC2616 for informations about HTTP protocol, and
+ * RFC2965 for informations about cookies usage. More generally, the IETF HTTP
+ * Working Group's web site should be consulted for protocol related changes :
+ *
+ *     http://ftp.ics.uci.edu/pub/ietf/http/
+ *
+ * Pending bugs (may be not fixed because never reproduced) :
+ *   - solaris only : sometimes, an HTTP proxy with only a dispatch address causes
+ *     the proxy to terminate (no core) if the client breaks the connection during
+ *     the response. Seen on 1.1.8pre4, but never reproduced. May not be related to
+ *     the snprintf() bug since requests were simple (GET / HTTP/1.0), but may be
+ *     related to missing setsid() (fixed in 1.1.15)
+ *   - a proxy with an invalid config will prevent the startup even if disabled.
+ *
+ * ChangeLog has moved to the CHANGELOG file.
+ *
+ */
+
+#define _GNU_SOURCE
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include <ctype.h>
+#include <sys/time.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/tcp.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+#include <netdb.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <signal.h>
+#include <stdarg.h>
+#include <sys/resource.h>
+#include <sys/wait.h>
+#include <time.h>
+#include <syslog.h>
+#include <grp.h>
+#ifdef USE_CPU_AFFINITY
+#include <sched.h>
+#ifdef __FreeBSD__
+#include <sys/param.h>
+#include <sys/cpuset.h>
+#endif
+#endif
+
+#ifdef DEBUG_FULL
+#include <assert.h>
+#endif
+
+#include <common/base64.h>
+#include <common/cfgparse.h>
+#include <common/chunk.h>
+#include <common/compat.h>
+#include <common/config.h>
+#include <common/defaults.h>
+#include <common/errors.h>
+#include <common/memory.h>
+#include <common/mini-clist.h>
+#include <common/namespace.h>
+#include <common/regex.h>
+#include <common/standard.h>
+#include <common/time.h>
+#include <common/uri_auth.h>
+#include <common/version.h>
+
+#include <types/capture.h>
+#include <types/global.h>
+#include <types/acl.h>
+#include <types/peers.h>
+
+#include <proto/acl.h>
+#include <proto/applet.h>
+#include <proto/arg.h>
+#include <proto/auth.h>
+#include <proto/backend.h>
+#include <proto/channel.h>
+#include <proto/checks.h>
+#include <proto/connection.h>
+#include <proto/fd.h>
+#include <proto/hdr_idx.h>
+#include <proto/hlua.h>
+#include <proto/listener.h>
+#include <proto/log.h>
+#include <proto/pattern.h>
+#include <proto/protocol.h>
+#include <proto/proto_http.h>
+#include <proto/proxy.h>
+#include <proto/queue.h>
+#include <proto/server.h>
+#include <proto/session.h>
+#include <proto/stream.h>
+#include <proto/signal.h>
+#include <proto/task.h>
+#include <proto/dns.h>
+
+#ifdef USE_OPENSSL
+#include <proto/ssl_sock.h>
+#endif
+
+#ifdef USE_DEVICEATLAS
+#include <import/da.h>
+#endif
+
+#ifdef USE_51DEGREES
+#include <import/51d.h>
+#endif
+
+/*********************************************************************/
+
+extern const struct comp_algo comp_algos[];
+
+/*********************************************************************/
+
+/* list of config files */
+static struct list cfg_cfgfiles = LIST_HEAD_INIT(cfg_cfgfiles);
+int  pid;			/* current process id */
+int  relative_pid = 1;		/* process id starting at 1 */
+
+/* global options */
+struct global global = {
+	.nbproc = 1,
+	.req_count = 0,
+	.logsrvs = LIST_HEAD_INIT(global.logsrvs),
+#if defined(USE_ZLIB) && defined(DEFAULT_MAXZLIBMEM)
+	.maxzlibmem = DEFAULT_MAXZLIBMEM * 1024U * 1024U,
+#else
+	.maxzlibmem = 0,
+#endif
+	.comp_rate_lim = 0,
+	.ssl_server_verify = SSL_SERVER_VERIFY_REQUIRED,
+	.unix_bind = {
+		 .ux = {
+			 .uid = -1,
+			 .gid = -1,
+			 .mode = 0,
+		 }
+	},
+	.tune = {
+		.bufsize = BUFSIZE,
+		.maxrewrite = -1,
+		.chksize = BUFSIZE,
+		.reserved_bufs = RESERVED_BUFS,
+		.pattern_cache = DEFAULT_PAT_LRU_SIZE,
+#ifdef USE_OPENSSL
+		.sslcachesize = SSLCACHESIZE,
+		.ssl_default_dh_param = SSL_DEFAULT_DH_PARAM,
+#ifdef DEFAULT_SSL_MAX_RECORD
+		.ssl_max_record = DEFAULT_SSL_MAX_RECORD,
+#endif
+		.ssl_ctx_cache = DEFAULT_SSL_CTX_CACHE,
+#endif
+#ifdef USE_ZLIB
+		.zlibmemlevel = 8,
+		.zlibwindowsize = MAX_WBITS,
+#endif
+		.comp_maxlevel = 1,
+#ifdef DEFAULT_IDLE_TIMER
+		.idle_timer = DEFAULT_IDLE_TIMER,
+#else
+		.idle_timer = 1000, /* 1 second */
+#endif
+	},
+#ifdef USE_OPENSSL
+#ifdef DEFAULT_MAXSSLCONN
+	.maxsslconn = DEFAULT_MAXSSLCONN,
+#endif
+#endif
+#ifdef USE_DEVICEATLAS
+	.deviceatlas = {
+		.loglevel = 0,
+		.jsonpath = 0,
+		.cookiename = 0,
+		.cookienamelen = 0,
+		.useragentid = 0,
+		.daset = 0,
+		.separator = '|',
+	},
+#endif
+#ifdef USE_51DEGREES
+	._51degrees = {
+		.property_separator = ',',
+		.property_names = LIST_HEAD_INIT(global._51degrees.property_names),
+		.data_file_path = NULL,
+#ifdef FIFTYONEDEGREES_H_PATTERN_INCLUDED
+		.data_set = { },
+#endif
+		.cache_size = 0,
+	},
+#endif
+	/* others NULL OK */
+};
+
+/*********************************************************************/
+
+int stopping;	/* non zero means stopping in progress */
+int jobs = 0;   /* number of active jobs (conns, listeners, active tasks, ...) */
+
+/* Here we store informations about the pids of the processes we may pause
+ * or kill. We will send them a signal every 10 ms until we can bind to all
+ * our ports. With 200 retries, that's about 2 seconds.
+ */
+#define MAX_START_RETRIES	200
+static int *oldpids = NULL;
+static int oldpids_sig; /* use USR1 or TERM */
+
+/* this is used to drain data, and as a temporary buffer for sprintf()... */
+struct chunk trash = { };
+
+/* this buffer is always the same size as standard buffers and is used for
+ * swapping data inside a buffer.
+ */
+char *swap_buffer = NULL;
+
+int nb_oldpids = 0;
+const int zero = 0;
+const int one = 1;
+const struct linger nolinger = { .l_onoff = 1, .l_linger = 0 };
+
+char hostname[MAX_HOSTNAME_LEN];
+char localpeer[MAX_HOSTNAME_LEN];
+
+/* used from everywhere just to drain results we don't want to read and which
+ * recent versions of gcc increasingly and annoyingly complain about.
+ */
+int shut_your_big_mouth_gcc_int = 0;
+
+/* list of the temporarily limited listeners because of lack of resource */
+struct list global_listener_queue = LIST_HEAD_INIT(global_listener_queue);
+struct task *global_listener_queue_task;
+static struct task *manage_global_listener_queue(struct task *t);
+
+/* bitfield of a few warnings to emit just once (WARN_*) */
+unsigned int warned = 0;
+
+/*
+ * Local variables:
+ *  c-indent-level: 8
+ *  c-basic-offset: 8
+ * End:
+ */
-- 
1.9.1

